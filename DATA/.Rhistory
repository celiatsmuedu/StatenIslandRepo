length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 10, 2), times = 10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
swirl()
swirl()
skip()
swirl()
swirl()
sessionInfo()
library()
sessionInfo()
?is_equivalent_to
is_equivalent_to <- function(x)
{}
?is_equivalent_to
is_equivalent_to()
is_equivalent_to(1)
is_equivalent_to <- function(x) {}
is_equivalent_to <- function(x) {
return TRUE
is_equivalent_to <- function(x) {
return "TRUE"
is_equivalent_to <- function(x) {
return TRUE }
is_equivalent_to <- function(x) {
y <- TRUE
return y
is_equivalent_to <- function(x) {
v <- TRUE
return v }
is_equivalent_to <- function(x) {
TRUE
}
is_equivalent_to(4)
swirl()
is_equivalent_to <- function(correctVal) {
TRUE
}
is_equivalent_to(4)
swirl()
is_equivalent_to <- function(correctVal, label = correctVal) {
TRUE
}
is_equivalent_to(4)
swirl()
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("R_Programming_Alt")
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
is_equivalent_to(4)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
rm(is_equivalent_to())
rm(is_equivalent_to
)
swirl()
swirl()
swirlExpectation <- function(testthat_expectation){
passed <- testthat_expectation$passed
error <- testthat_expectation$error
if(exists("failure_msg", testthat_expectation)){
message <- failure_msg <- testthat_expectation$failure_msg
success_msg <- testthat_expectation$success_msg
} else {
failure_msg <- message <- testthat_expectation$message
success_msg <- "unknown"
}
structure(
list(
passed = passed, error = error, message = message,
failure_msg = failure_msg, success_msg = success_msg
),
class = c("swirl_expectation", "expectation")
)
}
swirl()
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, 10)]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_data)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_data)
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
swirl()
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = TRUE)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = TRUE)
my_matrix2
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = TRUE, dimname = list(c("row1", "row2", "row3", "row4"), c("C.1", "C.2", "C.3", "C.4", "C.5")))
my_matrix2
swirl()
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = TRUE, dimname = list(c("row1", "row2", "row3", "row4"), c("C.1", "C.2", "C.3", "C.4", "C.5")))
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = TRUE, dimname = list(c("row1", "row2", "row3", "row4"), c("C.1", "C.2", "C.3", "C.4", "C.5")))
swirl()
no
x
exit
exit()
m
swirl()
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = TRUE, dimname = list(c("row1", "row2", "row3", "row4"), c("C.1", "C.2", "C.3", "C.4", "C.5")))
my_matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2
swirl()
swirl()
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
swirl()
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
swirl()
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
function (testthat_expectation)
{
passed <- testthat_expectation$passed
error <- testthat_expectation$error
if (exists("failure_msg", testthat_expectation)) {
message <- failure_msg <- testthat_expectation$failure_msg
success_msg <- testthat_expectation$success_msg
}
else {
failure_msg <- message <- testthat_expectation$message
success_msg <- "unknown"
}
structure(list(passed = passed, error = error, message = message,
failure_msg = failure_msg, success_msg = success_msg),
class = c("swirl_expectation", "expectation"))
}
install.packages('swirl')
library(swirl)
rm(list=ls())
install_from_swirl("R_Programming_Alt")
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
swirl()
siwrl()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <- 10
10 <= 10
5 !- 7
5 != 7
5 != 7
!(5 -- 7)
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(!0)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <- 10
10 <= 10
5 != 7
!(5 == 7)
FALSE & false
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
swirl()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cl_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sium)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lappy(flag_shapes, range())
lapply(flag_shapes, range())
lapply(flag_shapes, range
)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(flag_shapes)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique(flags))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plant)
ncol(plants)
object.size(plants)
name(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, prob = c(0.3, 0.7))
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, mean = 10)
rpois(5)
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
install.packages("swirl", repos = "https://cran.rstudio.com/")
library(swirl)
rm(list-ls())
rm(list=ls())
ls()
install_from_swirl("R_Programming_Alt")
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
swirl()
install_from_swirl("R_Programming")
swirl()
swirl()
install.packages("swirl")
library(swirl)
rm(list=ls())
install_from_swirl("R_Programming")
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Johnny Quick")
my_name <- c(my_char, "Johnny Quick")
my_name
paste(my_name, sep = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3, c("X", "Y", "Z"")))
)
)
paste(c(1:3, c("X", "Y", "Z"")), sep = "")
info()
skip()
paste(LETTERS, 1:4, sep = "-")
rm(list=ls())
scatterplot()
library(stackloss)
summary(stackloss)
str(stackloss)
str(stack.loss)
plot(stack.loss, air.flow)
plot(stack.loss, Air.Flow)
plot(stack.loss, stackloss.$Air.Flow)
plot(stack.loss, stackloss.$ Air.Flow)
summary(stackloss)
plot(stack.loss, stackloss)
plot(stack.loss, stackloss.$ Air.Flow)
summary(stackloss.$Air.Flow)
summary(stackloss.$ Air.Flow)
summary(Air.Flow)
class(stackloss)
surveyInfo <– read.table(
“http://www.calvin.edu/∼scofield/courses/stats/data/surveys/surveyDataForLab.data”,
sep=’,’, header=T)
surveyInfo <- read.table()
surveyInfo <- read.table(
“http://www.calvin.edu/∼scofield/courses/stats/data/surveys/surveyDataForLab.data”,
sep=’,’, header=T)
surveyInfo <- read.table(
“http://www.calvin.edu/∼scofield/courses/stats/data/surveys/surveyDataForLab.data”,
surveyInfo <- read.table(
“http://www.calvin.edu/∼scofield/courses/stats/data/surveys/surveyDataForLab.data
attach(stackloss)
plot(Air.Flow, stack.loss)
summary(stackloss)
stackloss
summary(stackloss)
str(stackloss)
rm(ls = list(ls))
detach(stackloss)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: stackloss.summary
summary(stackloss)
# Chunk 3: stackloss.structure
str(stackloss)
# Chunk 4: stackloss.plot
attach(stackloss)
plot(Air.Flow, stack.loss)
detach(stackloss)
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 <= 7
6 < 7
10 <= 10
5 != 7
!(5 != 7)
!(5 = 7)
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
## Load repmis library
library(repmis)
## Site URL
fileURL <- http://bit.ly/14aS5qq
## This file will be loaded into the current working directory
# Download data
FinRegulatorData <- source_data(fileURL, sep = ",", header = TRUE)
## Can't do this with non-public folders
## for more on downloading from dropbox, see page 87 and 88 of gandrud
intall.packages("repmis")
## Load repmis library
library(repmis)
## Site URL
fileURL <- http://bit.ly/14aS5qq
## This file will be loaded into the current working directory
# Download data
FinRegulatorData <- source_data(fileURL, sep = ",", header = TRUE)
## Can't do this with non-public folders
## for more on downloading from dropbox, see page 87 and 88 of gandrud
intall.packages("repmis")
## Load repmis library
library(repmis)
install.packages("repmis")
## Load repmis library
library(repmis)
## Site URL
fileURL <- http://bit.ly/14aS5qq
## This file will be loaded into the current working directory
# Download data
FinRegulatorData <- source_data(fileURL, sep = ",", header = TRUE)
## Can't do this with non-public folders
## for more on downloading from dropbox, see page 87 and 88 of gandrud
install.packages("repmis")
fileURL <- http://bit.ly/14aS5qq
fileURL <- "http://bit.ly/14aS5qq"
FinRegulatorData <- source_data(fileURL, sep = ",", header = TRUE)
?source_data
??source_data
library(repmis)
FinRegulatorData <- source_data(fileURL, sep = ",", header = TRUE)
haed(FinRegulatorData)
head(FinRegulatorData)
file.info(FinRegulatorData)
dim(FinRegulatorData)
cnames(FinRegulatorData)
cname(FinRegulatorData)
## Load repmis library
install.packages("repmis")
library(repmis)
## Site URL
fileURL <- "http://bit.ly/14aS5qq"
## This file will be loaded into the current working directory
# Download data
FinRegulatorData <- source_data(fileURL, sep = ",", header = TRUE)
install.packages("repmis")
library(repmis)
fileURL <- "http://bit.ly/14aS5qq"
FinRegulatorData <- source_data(fileURL, sep = ",", header = TRUE)
source('C:/Users/Johnny/OneDrive/Documents/6306/Unit3/live3repo/Main.R', echo=TRUE)
source('C:/Users/Johnny/OneDrive/Documents/6306/Unit3/live3repo/Main.R', echo=TRUE)
source('C:/Users/Johnny/OneDrive/Documents/6306/Unit3/live3repo/Main.R', echo=TRUE)
